buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}

plugins {
    id "com.wynprice.cursemaven" version "2.1.5"
    id "de.undercouch.download" version "4.1.1"
    id "maven-publish"
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'idea'
apply plugin: 'maven-publish'

version = '1.0'
group = 'fr.obelouix' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'obecraft'

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    // The mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   Snapshot are built nightly.
    // stable_#            Stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: 'snapshot', version: '20201028-1.16.3'
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                obecraft {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                obecraft {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'obecraft', '--all',
                    '--existing', file('src/main/resources'),
                    '--existing', file('src/generated/resources'),
                    '--output', file('src/generated/resources/')


            mods {
                obecraft {
                    source sourceSets.main
                }
            }
        }
    }
}

processResources {
    from(sourceSets.main.resources.srcDirs) {
        include('META-INF/mods.toml')
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven {
        name "Modmaven"
        url "https://modmaven.dev/"
    }
    maven {
        // location of the maven that hosts JEI files
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://modmaven.k-4u.nl"
    }
    maven {
        url "https://www.cursemaven.com"
    }
}
dependencies {
    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft 'net.minecraftforge:forge:1.16.5-36.0.1'
    compile 'org.apache.commons:commons-math3:3.6.1'
    //compile "appeng:appliedenergistics2:8.2.0-beta.3" cause crash
    // compile fg.deobf("curse.maven:optiforge:3165083")
    // compile against the JEI API but do not include it at runtime
    compileOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}:api")
    // at runtime, use the full JEI jar
    runtimeOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}")
    //compile fg.deobf("curse.maven:ftb-gui-library:3133000")
    compile fg.deobf("curse.maven:iron-chest:3105315")
//    compile fg.deobf("curse.maven:cofh-core:3155824")
//    compile fg.deobf("curse.maven:cofh-world:3155824")
//    compile fg.deobf("curse.maven:thermal-foundation:3155830")
    compile fg.deobf("curse.maven:biomeoplenty:3174413")
    compileOnly "mekanism:Mekanism:${mekanism_version}:api"
    // If you want to test/use Mekanism & its modules during `runClient` invocation, use the following
//    runtimeOnly fg.deobf("mekanism:Mekanism:${mekanism_version}")// core
//    runtimeOnly fg.deobf("mekanism:Mekanism:${mekanism_version}:additions")// Mekanism: Additions
//    runtimeOnly fg.deobf("mekanism:Mekanism:${mekanism_version}:generators")// Mekanism: Generators
//    runtimeOnly fg.deobf("mekanism:Mekanism:${mekanism_version}:tools")// Mekanism: Tools
    // You may put jars on which you depend on in ./libs or you may define them like so..
    // compile "some.group:artifact:version:classifier"
    // compile "some.group:artifact:version"

    // Real examples
    // compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
    // compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env

    // The 'provided' configuration is for optional dependencies that exist at compile-time but might not at runtime.
    // provided 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // These dependencies get remapped to your current MCP mappings
    // deobf 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // For more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html

}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
                "Specification-Title"        : "obecraft",
                "Specification-Vendor"       : "obelouix",
                "Specification-Version"      : "1", // We are version 1 of ourselves
                "Implementation-Title"       : project.name,
                "Implementation-Version"     : "${archiveVersion}",
                "Implementation-Vendor"      : "obelouix",
                "Implementation-Timestamp"   : new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConnector"             : "fr.obelouix.obecraft.MixinConnector",
                'FMLCorePluginContainsFMLMod': 'true'
        ])
    }
}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

publishing {
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/obelouix/obecraft")
            credentials {
                username = "obelouix"
                password = project.findProperty("gpr.key") ?: System.getenv("TOKEN")
            }
        }
    }
    publications {
        gpr(MavenPublication) {
            artifactId 'obecraft'
            from(components.java)
        }
    }

}

task downloadFromUrls() {
    def mods_folder = "${projectDir}/run/mods"
    /*if(!file("${mods_folder}/aa_do_not_rename_OptiFineDevTweaker-2.5-all.jar").exists()){
        download{
            s//rc(["https://github.com/OpenCubicChunks/OptiFineDevTweaker/releases/download/2.5/aa_do_not_rename_OptiFineDevTweaker-2.5-all.jar"])
           // dest "${mods_folder}"
        }
    }*/
}

